//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedidProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MEDIDDMEntities : DbContext
    {
        public MEDIDDMEntities()
            : base("name=MEDIDDMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DepartmentInfo> DepartmentInfoes { get; set; }
        public virtual DbSet<DipositInfo> DipositInfoes { get; set; }
        public virtual DbSet<GenderInfo> GenderInfoes { get; set; }
        public virtual DbSet<MoneyTransectionTable> MoneyTransectionTables { get; set; }
        public virtual DbSet<PersonalDipositInfo> PersonalDipositInfoes { get; set; }
        public virtual DbSet<ProductCatagory> ProductCatagories { get; set; }
        public virtual DbSet<ProductOutDetail> ProductOutDetails { get; set; }
        public virtual DbSet<ProductStockDetail> ProductStockDetails { get; set; }
        public virtual DbSet<PurposeInfo> PurposeInfoes { get; set; }
        public virtual DbSet<SecurityTable> SecurityTables { get; set; }
        public virtual DbSet<StudentInfo> StudentInfoes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TypeInfo> TypeInfoes { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_Show_Student_Info_Result> SP_Show_Student_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Show_Student_Info_Result>("SP_Show_Student_Info");
        }
    
        public virtual ObjectResult<SP_Show_Transection_Info_Result> SP_Show_Transection_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Show_Transection_Info_Result>("SP_Show_Transection_Info");
        }
    
        public virtual ObjectResult<SP_Show_Transection_Detail_Result> SP_Show_Transection_Detail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Show_Transection_Detail_Result>("SP_Show_Transection_Detail");
        }
    
        public virtual ObjectResult<SP_Show_Transection_Data_Info_Result> SP_Show_Transection_Data_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Show_Transection_Data_Info_Result>("SP_Show_Transection_Data_Info");
        }
    
        public virtual ObjectResult<SP_GName_RName_Date_Purpose_Report_Result> SP_GName_RName_Date_Purpose_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> gNAME, Nullable<int> rNAME, Nullable<int> pURPOSE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var gNAMEParameter = gNAME.HasValue ?
                new ObjectParameter("GNAME", gNAME) :
                new ObjectParameter("GNAME", typeof(int));
    
            var rNAMEParameter = rNAME.HasValue ?
                new ObjectParameter("RNAME", rNAME) :
                new ObjectParameter("RNAME", typeof(int));
    
            var pURPOSEParameter = pURPOSE.HasValue ?
                new ObjectParameter("PURPOSE", pURPOSE) :
                new ObjectParameter("PURPOSE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GName_RName_Date_Purpose_Report_Result>("SP_GName_RName_Date_Purpose_Report", sDATEParameter, eDATEParameter, gNAMEParameter, rNAMEParameter, pURPOSEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Giver_Report_Result> SP_Day_And_Giver_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> gNAME)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var gNAMEParameter = gNAME.HasValue ?
                new ObjectParameter("GNAME", gNAME) :
                new ObjectParameter("GNAME", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Giver_Report_Result>("SP_Day_And_Giver_Report", sDATEParameter, eDATEParameter, gNAMEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Purpose_Report_Result> SP_Day_And_Purpose_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> pURPOSE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var pURPOSEParameter = pURPOSE.HasValue ?
                new ObjectParameter("PURPOSE", pURPOSE) :
                new ObjectParameter("PURPOSE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Purpose_Report_Result>("SP_Day_And_Purpose_Report", sDATEParameter, eDATEParameter, pURPOSEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Receiver_Report_Result> SP_Day_And_Receiver_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> rNAME)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var rNAMEParameter = rNAME.HasValue ?
                new ObjectParameter("RNAME", rNAME) :
                new ObjectParameter("RNAME", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Receiver_Report_Result>("SP_Day_And_Receiver_Report", sDATEParameter, eDATEParameter, rNAMEParameter);
        }
    
        public virtual ObjectResult<SP_Day_Wise_Transection_Report_Result> SP_Day_Wise_Transection_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_Wise_Transection_Report_Result>("SP_Day_Wise_Transection_Report", sDATEParameter, eDATEParameter);
        }
    
        public virtual ObjectResult<SP_Giver_And_Receiver_Report_Result> SP_Giver_And_Receiver_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> gNAME, Nullable<int> rNAME)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var gNAMEParameter = gNAME.HasValue ?
                new ObjectParameter("GNAME", gNAME) :
                new ObjectParameter("GNAME", typeof(int));
    
            var rNAMEParameter = rNAME.HasValue ?
                new ObjectParameter("RNAME", rNAME) :
                new ObjectParameter("RNAME", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Giver_And_Receiver_Report_Result>("SP_Giver_And_Receiver_Report", sDATEParameter, eDATEParameter, gNAMEParameter, rNAMEParameter);
        }
    
        public virtual ObjectResult<SP_GName_RName_Date_Purpose_Report2_Result> SP_GName_RName_Date_Purpose_Report2(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> gNAME, Nullable<int> rNAME, Nullable<int> pURPOSE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var gNAMEParameter = gNAME.HasValue ?
                new ObjectParameter("GNAME", gNAME) :
                new ObjectParameter("GNAME", typeof(int));
    
            var rNAMEParameter = rNAME.HasValue ?
                new ObjectParameter("RNAME", rNAME) :
                new ObjectParameter("RNAME", typeof(int));
    
            var pURPOSEParameter = pURPOSE.HasValue ?
                new ObjectParameter("PURPOSE", pURPOSE) :
                new ObjectParameter("PURPOSE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GName_RName_Date_Purpose_Report2_Result>("SP_GName_RName_Date_Purpose_Report2", sDATEParameter, eDATEParameter, gNAMEParameter, rNAMEParameter, pURPOSEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Day_Diposit_And_Expenses_Report_Result> SP_Day_And_Day_Diposit_And_Expenses_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Day_Diposit_And_Expenses_Report_Result>("SP_Day_And_Day_Diposit_And_Expenses_Report", sDATEParameter, eDATEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Name_Report_Result> SP_Day_And_Name_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> nAME)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var nAMEParameter = nAME.HasValue ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Name_Report_Result>("SP_Day_And_Name_Report", sDATEParameter, eDATEParameter, nAMEParameter);
        }
    
        public virtual ObjectResult<SP_Day_And_Transection_Type_Report_Result> SP_Day_And_Transection_Type_Report(Nullable<System.DateTime> sDATE, Nullable<System.DateTime> eDATE, Nullable<int> tType)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            var tTypeParameter = tType.HasValue ?
                new ObjectParameter("TType", tType) :
                new ObjectParameter("TType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Day_And_Transection_Type_Report_Result>("SP_Day_And_Transection_Type_Report", sDATEParameter, eDATEParameter, tTypeParameter);
        }
    
        public virtual ObjectResult<SP_Name_Report_Result> SP_Name_Report(Nullable<int> nAME)
        {
            var nAMEParameter = nAME.HasValue ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Name_Report_Result>("SP_Name_Report", nAMEParameter);
        }
    
        public virtual ObjectResult<SP_Transection_Type_Report_Result> SP_Transection_Type_Report(Nullable<int> tType)
        {
            var tTypeParameter = tType.HasValue ?
                new ObjectParameter("TType", tType) :
                new ObjectParameter("TType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Transection_Type_Report_Result>("SP_Transection_Type_Report", tTypeParameter);
        }
    
        public virtual ObjectResult<SP_7_Day_Data_Analysis_Result> SP_7_Day_Data_Analysis(Nullable<System.DateTime> sDATE, Nullable<int> tTYPE)
        {
            var sDATEParameter = sDATE.HasValue ?
                new ObjectParameter("SDATE", sDATE) :
                new ObjectParameter("SDATE", typeof(System.DateTime));
    
            var tTYPEParameter = tTYPE.HasValue ?
                new ObjectParameter("TTYPE", tTYPE) :
                new ObjectParameter("TTYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_7_Day_Data_Analysis_Result>("SP_7_Day_Data_Analysis", sDATEParameter, tTYPEParameter);
        }
    }
}
